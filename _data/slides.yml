#############
#
# See dcycleproject.org
#
# Authored by Albert Albala (@alberto56)
#
# This slideshow uses
#
#  * [Deck.js](http://imakewebthings.com/deck.js/) for the slideshow
#  * GitHub and GitHub Pages for hosting
#  * [Jekyll](http://jekyllrb.com) for converting yaml into HTML for deck.js
#
# See https://github.com/alberto56/dcycle_3_day_training
# See http://alberto56.github.io/dcycle_3_day_training/
#
#############

- id: intro-me
  title: Intro
  desc: |
    Who am I?

     * Albert Albala (alberto56)
     * Worked with STM, CGI, Koumbit, TP1
     * Interests: Testing, Continuous integration, Deployment

    This is an open-source slideshow, you can [fork or edit it on GitHub](https://github.com/alberto56/dcycle_3_day_training/edit/gh-pages/_data/slides.yml)

#############

- id: intro-you
  title: Intro
  desc: |
    Who are you?

     * Introductions
     * Your _top five_ desired takeaways?

#############

- id: goal
  title: Proposed goal
  desc: |
    * Define best practices.
    * Agree *as a team*
    * Actionable items.
    * Have a centralized issue-tracker for progress over coming months.

#############

- id: approach
  title: Proposed approach
  desc: |
    * Gradual and incremental (like *Agile*).
    * No perfect solution: continuous improvement (like *Agile*).
    * Human interactions more important than tools (like *Agile*).
    * Implement only what we agree upon
    * Hands-on with a real website and a real Jenkins server
    * *Don't subvert the process*
      * If we agree on an approach, we should always follow it
      * If we don't agree on an approach, we should not do it

#############

- id: quality
  title: Quality is our ultimate goal
  desc: |
   * Four basic ingredients (in order):
     * Agile
     * Standardized deployment
     * Continuous integration
     * Tests

#############

- id: schedule
  title: Proposed schedule
  desc: |
     * 50% discussion, 50% practice
     * Day one: basics
     * Day two: extending CI, using Git
     * Day three: environments, devops...

#############

- id: schedule-day-1
  title: Proposed schedule (day 1/3)
  desc: |
     * Our environments
     * CI
     * Deployment
     * The test pyramid
     * Four types of tests (hands-on)
     * Legacy code

#############

- id: schedule-day-2
  title: Proposed schedule (day 2/3)
  desc: |
     * Extending CI
     * Metrics
     * Decisions to be made as a team
       * (How) do we code review?
       * How do we use branching
       * What environments do we use
       * How do we use git
       * ...

#############

- id: schedule-day-3
  title: Proposed schedule (day 3/3)
  desc: |
     * Quality gates and environments
     * Using DevOps
     * Inviolability principle (don't subvert the process)
     * More hands-on

#############

- id: resources
  title: Resources
  desc: |
     * [The Dcycle blog and manifesto](http://dcycleproject.org)
     * Book "Continuous delivery" by Jez Humble
     * Book "Working Effectively with Legacy Code" by Michael Feathers

     <img src="http://www.thoughtworks.com/imgs/continuous-delivery.jpg" style="float:left;"/>
     <img src="http://ecx.images-amazon.com/images/I/51H6SHy6g2L._SL500_AA300_.jpg" style="float:left;" />

#############

- id: prerequisites
  title: Prerequisites (before we start)
  desc: |
     * You will receive [a page](passwords.html) with passwords, server names, etc.
     * SSH key
     * Internet connection
     * Access to Jenkins (front-end)
     * Access to Jenkins (terminal)
     * Access to the Drupal 7 project git repo
     * Access to the Drupal 8 project git repo
     * Access to the Drupal 7 project issue queue
     * Access to the Drupal 8 project issue queue
     * Team's continuous improvement issue queue
     * local stack or vagrant for development
     * Drush 7.x needed for D8
     * Full instructions on your page and projects' README.md files

#############

- id: proceed
  title: Suggestion on how to proceed
  desc: |
   * Hands-on
   * Real live D7 and D8 sites
   * D8 procedure is experimental
   * Real features
   * Real bugs
   * Pair-programming (splinter groups)

#############

- id: workflow
  title: Our workflow for the training
  desc: |
   * __It's not perfect or secure, it's just for the demo!__
   * Site deployment module
   * Never clone databases (except for prod to preprod)
   * 2 git branches: master (unstable) and prod (stable)
   * Commits in small chunks, no branches
   * Jenkins, dev and prod on the same machine
   * Everything in one big git repo (no git submodules, drush make, etc.)
   * __Later on we'll talk about tailoring this setup for this team__.

#############

- id: be-patient-testing
  title: Be patient, we'll get to testing, but first...
  desc: |
   * Effective testing requires a CI job
   * A CI server requires us to think about how we deploy
   * So we'll start with deployments...

#############

- id: importance-of-standardized-deployment
  title: The importance of standardized deployment
  desc: |
   * The database is not versioned
   * Testing the database has little value
   * "Known good starting point principle" (Jez Humble)
   * Quality of code vs. quality of environment
   * Testing vs. monitoring
   * **What's so special about production?**

#############

- id: deploy
  title: Initial deployment
  desc: |
   * [hands-on] clone D7 and D8 on your local environment (instructions coming up)
   * new development environment with dummy data
   * The database is not cloned
   * inspecting the common dev environment
   * inspecting the "prod" environment
   * inspecting the CI jobs and what they do

#############

- id: deploy-1
  title: Initial deployment step 1
  desc: |
    Clone the git repos (D7 and D8)

#############

- id: deploy-2
  title: Initial deployment step 2
  desc: |
    Create your databases

        echo 'create database d7demo'|mysql -uroot -proot
        echo 'create database d8demo'|mysql -uroot -proot

#############

- id: deploy-7
  title: Set up your D7 site
  desc: |
    Install Drupal & the site deployment module, and log in

        drush si --db-url=mysql://root:root@localhost/d7demo -y
        drush en demo_deploy -y
        drush en demo_devel -y
        drush generate-relatistic
        drush uli

#############

- id: deploy-8-1
  title: Set up your D8 site (1/3)
  desc: |
    Install Drupal & the site deployment module

        drush si --db-url=mysql://root:root@localhost/d8demo -y
        drush en demo_deploy -y
        drush en demo_devel -y

#############

- id: deploy-8-2
  title: Set up your D8 site (2/3)
  desc: |
    Set the configuration folder

        echo "$config_directories['deploy'] = '../deploy';" >> sites/default/settings.php

#############

- id: deploy-8-3
  title: Set up your D8 site (3/3)
  desc: |
    Set configuration, dummy content and log in

        drush cim deploy -y
        drush generate-users 10
        drush generate-content 10
        drush uli

#############

- id: incremental-deploy-7
  title: Incremental deployment of D7
  desc: |
    Let's add a view and a dependency, and remove a module

        drush vset maintenance_mode 1
        git pull origin master
        drush rr
        drush updb -y
        drush fra
        drush cc all
        drush cron
        drush vset maintenance_mode 0

#############

- id: incremental-deploy-8
  title: Incremental deployment of D8
  desc: |
    Let's add a view and a dependency, and remove a module

        git pull origin master
        drush cr
        drush updb -y
        drush cim -y

#############

- id: why-deployment
  title: Why do we do deployment like this?
  desc: |
     * "Lockdown" principle
     * Standardization = less errors
     * DB not versioned, not relevant
     * Something wrong on a test environment: drush si
     * Develop software vs. configure site
     * Testing automation
     * CI automation
     * Avoiding "works of art" in favour of standardized environments

#############

- id: intro-to-ci
  title: How we are using CI
  desc: |
      * Continuous integration is really not rocket science
      * A look at the Vagrant Jenkins box on GitHub
      * How our jobs work: automate almost everything

#############

- id: ci-jobs
  title: Our CI jobs
  desc: |
      * Check master _automatically_
      * If master passes, update dev _automatically_
      * If dev can be updated, update preprod _automatically_
      * Humans initiate updating _prod_, which takes a backup

#############

- id: ci-jobs-demo
  title: CI demo
  desc: |
      * Make a change to our codebase
      * Push to dev
      * Let's try breaking something
      * Hands-on: work in groups on issues

#############

- id: workflow-environments
  title: Note on environments
  desc: |
      * Local: on each dev's machine
      * Jenkins: unstable, might be broken, what Jenkins sees
      * Dev: fake content, stable latest version of site
        * the whale and skycraper test
      * Preprod: last checks before prod, uses a clone of prod
      * Prod: the production site
      * Prod: can be more than one
      * Nothing (that) special about production

#############

- id: jenkins-tips
  title: Jenkins tips
  desc: |
      * Red project: drop everything
      * Agree as a team on what should make jenkins red
        * A missing space in `foreach(...`
        * A PHP syntax error
        * ...

#############

- id: testing-intro
  title: Time to introduce testing
  desc: |
    CI and deployment are a prerequisite to testing. Why?

      * If a machine does not run your tests, they will be ignored.
      * For CI to reliably run tests, we need a good starting point.
      * ...hence standardized deployment

#############

- id: testing-intro-tdd
  title: Test-driven development
  desc: |
    Write your tests before your code

      * Or else you'll never write them
      * Define what needs to be done
      * Two modes: test writer and developer

#############

- id: test-pyramid
  title: The test pyramid
  desc: |
    Concept introduced by Mike Cohn, which we'll apply to Drupal: Unit tests, database tests, request-response tests (ignore Javascript), rich UI tests with Javascript
    <img src="http://mifosx.openmf.org/Mifos%20website/mifos.org/sites/rollout.mifos.org/files/u5/testing_pyramid.jpg" />

#############

- id: unit-tests
  title: Unit tests -- cheapest
  desc: |
    We will introduce Simpletest and PHPUnit for unit tests.

#############

- id: database-tests
  title: Database tests -- relatively cheap (if done right)
  desc: |
    Database tests ignore the current database, and run a new deployment of the site to test it, this is why in my experience it is important to have a one-step deployment process without cloning the database. We'll give one example and introduce ways to make the tests faster (slow tests are irritating).

#############

- id: reproduce-bugs-in-code
  title: reproduce prod bugs before solving them
  desc: |
    Example: unfinished tags

#############

- id: roles-and-tests
  title: Role-specific and content-specific behaviour
  desc: |
    If there are over 30 articles, the pager looks wierd for an editor

#############

- id: test-screenshots-for-theming
  title: Test screenshots for theming
  desc: |
    Test screenshots for theming

#############

- id: debugging-tests
  title: Debugging tests
  desc: |
    - the die() trick
    - the debug() trick

- id: test-your-sad-path-first
  title: Test your sad path first
  desc: |
    * What's the sad path
    * Why you should test it first

#############

- id: mocking
  title: Mocking -- how and why?
  desc: |
    We'll introduce how to deal with third-party systems by abstracting the interface between our site and the third-party service using mocking. We'll also look at some of the advanced mocking capabilities in PHPUnit, which ships with D8.

#############

- id: rich-ui
  title: Rich UI and browser-specific tests -- expensive
  desc: |
    We'll look at running tests on different browsers using Selenium, and we'll look at how a headless webkit-based browser (PhantomJS) can help test rich dynamic UI.

#############

- id: ie-selenium
  title: Testing IE with selenium
  desc: |
    Testing IE with Behat and selenium.

#############

- id: behat
  title: Behat -- why/how to use?
  desc: |
    Finally we'll look at what Behat is, what it's designed for, and in which contexts we will want to use it.

#############

- id: ids-in-code
  title: The problem with incremental ids in code
  desc: |
    for example [taxonomy incremental ids in views code generated by features](http://dcycleproject.org/blog/50/do-not-use-incremental-ids-your-code).

#############

- id: mock-objects
  title: The problem with incremental ids in code
  desc: |
    How do we test integration with third-party systems?

#############

- id: legacy-sites
  title: Legacy sites -- what they are and how to deal with them
  desc: |
     * Michael Feathers in the book "Working Effectively with Legacy Code"
     * a legacy project is a project which is not under active continuous integration.
     * a project which has zero tests is a legacy project.
     * a project with more than zero tests is not a legacy project.
     * any line of code which not covered by tests is a legacy line of code.
     * test coverage for a project is a measure of its quality. (what percentage of lines of code are covered by tests).

#############

- id: content-vs-confi
  title: Content vs. configuration
  desc: |
     * Config: anything that's in code and does not depend on the database
     * Content: anything that's not deployable (nodes, terms, any configuration done directly on a given environment)
     * Goal: More config, less content
     * Content is not readily testable
     * Everything outside of our new modern code should be considered either data (if it's in the database or otherwise unversioned -- the files directory, etc.), or legacy code (if it's in git, but somehow untestable, either because there are no tests for it, or it contains incremental IDs...)
     * Differentiate "developing software" vs. "configuring software"
     * Tests are software development
     * Monitoring is for software configuration

#############

- id: day-2-metrics
  title: Day 2 -- Metrics
  desc: |
    Which metrics do we track over time? Do we define thresholds above/below which our build should fail? For example, how many minor styling errors (using the coder module) do we tolerate? 100? 100000? no limit? What is our objective for test coverage of custom code? No lower limit? 10%? 40%?

- id: day-2-ci-for-better-security
  title: Day 2 -- CI for better security
  desc: |
    [Possible to](https://ohthehugemanatee.org/blog/2014/11/03/drupalgeddon-means-we-cant-trust-humans-with-updates/) use CI to apply security patches automatically.

#############

- id: day-2-jenkins-extensions
  title: integrating Jenkins with other tools
  desc: |
    - Jira
    - IRC

- id: day-2-metrics-demo
  title: Day 2 -- Metrics and artifacts Demo
  desc: |
     * Screen diffs
     * Number of db queries on front page
     * Time for db queries on front page
     * Code quality
     * Security review
     * Test coverage
     * HTML quality
     * CSS quality
     * Accessiblity guidelines
     * Doxygen
     * Performance
     * Test results
     * Orphaned modules
     * Quail
     * Lint
     * Git diff
     * Changelog
     * Performance
     * SASS
     * Patches
     * ...

#############

- id: day-2-metrics-screendiff
  title: Day 2 -- Metrics -- Screen diffs
  desc: |
    Screen diffs

#############

- id: day-2-metrics-quality
  title: Day 2 -- Metrics -- Code quality
  desc: |
     * Pdepend
     * Code Review

#############

- id: day-2-metrics-coverage
  title: Day 2 -- Metrics -- Test coverage
  desc: |
     * Coverage

#############

- id: day-2-artifacts
  title: Day 2 -- Artifacts
  desc: |
    What are artifacts and why are they useful?
      * Brainstorm

#############

- id: day-2-questions-for-the-team
  title: Day 2 -- Questions for the team
  desc: |
      * How do we do an initial deployment (to dev, preprod, to a new developer's laptop)?
      * How do we do an incremental deployment? Is the process standardized?
      * How do we push to dev? How? Jenkins?
      * How do we name our environments and what are they for?
      * Do we use a preproduction environment? How do we push to it?
      * In which contexts is it OK to clone the database?
      * How do we peer review? How does it fit into our process?
      * How do we use server config management and virtualization tools like Puppet, Ansible, Docker, Vagrant...
      * Branches
      * Code review
      * swimlanes

- id: branches
  title: How to use branchces
  desc: |
      * integration hell

- id: dont-subvert-the-process
  title: Don't subvert the process
  desc: |
      * Some scenarios where we might be tempted to subvert the process
